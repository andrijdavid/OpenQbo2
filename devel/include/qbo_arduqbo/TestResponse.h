// Generated by gencpp from file qbo_arduqbo/TestResponse.msg
// DO NOT EDIT!


#ifndef QBO_ARDUQBO_MESSAGE_TESTRESPONSE_H
#define QBO_ARDUQBO_MESSAGE_TESTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qbo_arduqbo
{
template <class ContainerAllocator>
struct TestResponse_
{
  typedef TestResponse_<ContainerAllocator> Type;

  TestResponse_()
    : SRFcount(0)
    , SRFAddress()
    , SRFNotFound()
    , Gyroscope(false)
    , Accelerometer(false)
    , LCD(false)
    , Qboard3(false)
    , Qboard1(false)
    , Qboard2(false)
    , rightMotor(false)
    , leftMotor(false)  {
    }
  TestResponse_(const ContainerAllocator& _alloc)
    : SRFcount(0)
    , SRFAddress(_alloc)
    , SRFNotFound(_alloc)
    , Gyroscope(false)
    , Accelerometer(false)
    , LCD(false)
    , Qboard3(false)
    , Qboard1(false)
    , Qboard2(false)
    , rightMotor(false)
    , leftMotor(false)  {
  (void)_alloc;
    }



   typedef int8_t _SRFcount_type;
  _SRFcount_type SRFcount;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _SRFAddress_type;
  _SRFAddress_type SRFAddress;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _SRFNotFound_type;
  _SRFNotFound_type SRFNotFound;

   typedef uint8_t _Gyroscope_type;
  _Gyroscope_type Gyroscope;

   typedef uint8_t _Accelerometer_type;
  _Accelerometer_type Accelerometer;

   typedef uint8_t _LCD_type;
  _LCD_type LCD;

   typedef uint8_t _Qboard3_type;
  _Qboard3_type Qboard3;

   typedef uint8_t _Qboard1_type;
  _Qboard1_type Qboard1;

   typedef uint8_t _Qboard2_type;
  _Qboard2_type Qboard2;

   typedef uint8_t _rightMotor_type;
  _rightMotor_type rightMotor;

   typedef uint8_t _leftMotor_type;
  _leftMotor_type leftMotor;





  typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TestResponse_

typedef ::qbo_arduqbo::TestResponse_<std::allocator<void> > TestResponse;

typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse > TestResponsePtr;
typedef boost::shared_ptr< ::qbo_arduqbo::TestResponse const> TestResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qbo_arduqbo::TestResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qbo_arduqbo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'qbo_arduqbo': ['/home/qbo/Desktop/melodia/src/qbo_arduqbo/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qbo_arduqbo::TestResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qbo_arduqbo::TestResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qbo_arduqbo::TestResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f8d7da5192e662dd9f7974027b7e5ee";
  }

  static const char* value(const ::qbo_arduqbo::TestResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f8d7da5192e662dULL;
  static const uint64_t static_value2 = 0xd9f7974027b7e5eeULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qbo_arduqbo/TestResponse";
  }

  static const char* value(const ::qbo_arduqbo::TestResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 SRFcount\n"
"int16[] SRFAddress\n"
"int16[] SRFNotFound\n"
"bool Gyroscope\n"
"bool Accelerometer\n"
"bool LCD\n"
"bool Qboard3\n"
"bool Qboard1\n"
"bool Qboard2\n"
"bool rightMotor\n"
"bool leftMotor\n"
"\n"
;
  }

  static const char* value(const ::qbo_arduqbo::TestResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SRFcount);
      stream.next(m.SRFAddress);
      stream.next(m.SRFNotFound);
      stream.next(m.Gyroscope);
      stream.next(m.Accelerometer);
      stream.next(m.LCD);
      stream.next(m.Qboard3);
      stream.next(m.Qboard1);
      stream.next(m.Qboard2);
      stream.next(m.rightMotor);
      stream.next(m.leftMotor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qbo_arduqbo::TestResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qbo_arduqbo::TestResponse_<ContainerAllocator>& v)
  {
    s << indent << "SRFcount: ";
    Printer<int8_t>::stream(s, indent + "  ", v.SRFcount);
    s << indent << "SRFAddress[]" << std::endl;
    for (size_t i = 0; i < v.SRFAddress.size(); ++i)
    {
      s << indent << "  SRFAddress[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.SRFAddress[i]);
    }
    s << indent << "SRFNotFound[]" << std::endl;
    for (size_t i = 0; i < v.SRFNotFound.size(); ++i)
    {
      s << indent << "  SRFNotFound[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.SRFNotFound[i]);
    }
    s << indent << "Gyroscope: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Gyroscope);
    s << indent << "Accelerometer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Accelerometer);
    s << indent << "LCD: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCD);
    s << indent << "Qboard3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Qboard3);
    s << indent << "Qboard1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Qboard1);
    s << indent << "Qboard2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Qboard2);
    s << indent << "rightMotor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rightMotor);
    s << indent << "leftMotor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leftMotor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QBO_ARDUQBO_MESSAGE_TESTRESPONSE_H
