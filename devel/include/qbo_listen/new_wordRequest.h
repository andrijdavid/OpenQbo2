// Generated by gencpp from file qbo_listen/new_wordRequest.msg
// DO NOT EDIT!


#ifndef QBO_LISTEN_MESSAGE_NEW_WORDREQUEST_H
#define QBO_LISTEN_MESSAGE_NEW_WORDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qbo_listen
{
template <class ContainerAllocator>
struct new_wordRequest_
{
  typedef new_wordRequest_<ContainerAllocator> Type;

  new_wordRequest_()
    : word()
    , grammar()
    , label()  {
    }
  new_wordRequest_(const ContainerAllocator& _alloc)
    : word(_alloc)
    , grammar(_alloc)
    , label(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _word_type;
  _word_type word;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _grammar_type;
  _grammar_type grammar;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;





  typedef boost::shared_ptr< ::qbo_listen::new_wordRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_listen::new_wordRequest_<ContainerAllocator> const> ConstPtr;

}; // struct new_wordRequest_

typedef ::qbo_listen::new_wordRequest_<std::allocator<void> > new_wordRequest;

typedef boost::shared_ptr< ::qbo_listen::new_wordRequest > new_wordRequestPtr;
typedef boost::shared_ptr< ::qbo_listen::new_wordRequest const> new_wordRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qbo_listen::new_wordRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qbo_listen::new_wordRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qbo_listen

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'qbo_listen': ['/home/qbo/Desktop/melodia/src/qbo_listen/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qbo_listen::new_wordRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qbo_listen::new_wordRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qbo_listen::new_wordRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "913028122c3cc118c51c7ef5177a9a46";
  }

  static const char* value(const ::qbo_listen::new_wordRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x913028122c3cc118ULL;
  static const uint64_t static_value2 = 0xc51c7ef5177a9a46ULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qbo_listen/new_wordRequest";
  }

  static const char* value(const ::qbo_listen::new_wordRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string word\n"
"string grammar\n"
"string label\n"
;
  }

  static const char* value(const ::qbo_listen::new_wordRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.word);
      stream.next(m.grammar);
      stream.next(m.label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct new_wordRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qbo_listen::new_wordRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qbo_listen::new_wordRequest_<ContainerAllocator>& v)
  {
    s << indent << "word: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.word);
    s << indent << "grammar: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.grammar);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QBO_LISTEN_MESSAGE_NEW_WORDREQUEST_H
