/* Auto-generated by genmsg_cpp for file /home/qbo/Desktop/qbo_ws/src/src/qbo_face_vision/qbo_face_msgs/srv/RecognizeFace.srv */
#ifndef QBO_FACE_MSGS_SERVICE_RECOGNIZEFACE_H
#define QBO_FACE_MSGS_SERVICE_RECOGNIZEFACE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"



namespace qbo_face_msgs
{
template <class ContainerAllocator>
struct RecognizeFaceRequest_ {
  typedef RecognizeFaceRequest_<ContainerAllocator> Type;

  RecognizeFaceRequest_()
  : face()
  {
  }

  RecognizeFaceRequest_(const ContainerAllocator& _alloc)
  : face(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _face_type;
   ::sensor_msgs::Image_<ContainerAllocator>  face;


  typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct RecognizeFaceRequest
typedef  ::qbo_face_msgs::RecognizeFaceRequest_<std::allocator<void> > RecognizeFaceRequest;

typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceRequest> RecognizeFaceRequestPtr;
typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceRequest const> RecognizeFaceRequestConstPtr;



template <class ContainerAllocator>
struct RecognizeFaceResponse_ {
  typedef RecognizeFaceResponse_<ContainerAllocator> Type;

  RecognizeFaceResponse_()
  : name()
  , recognized(false)
  {
  }

  RecognizeFaceResponse_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , recognized(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef uint8_t _recognized_type;
  uint8_t recognized;


  typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct RecognizeFaceResponse
typedef  ::qbo_face_msgs::RecognizeFaceResponse_<std::allocator<void> > RecognizeFaceResponse;

typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceResponse> RecognizeFaceResponsePtr;
typedef boost::shared_ptr< ::qbo_face_msgs::RecognizeFaceResponse const> RecognizeFaceResponseConstPtr;


struct RecognizeFace
{

typedef RecognizeFaceRequest Request;
typedef RecognizeFaceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RecognizeFace
} // namespace qbo_face_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "855244bd6f46c32e7594974161feb421";
  }

  static const char* value(const  ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x855244bd6f46c32eULL;
  static const uint64_t static_value2 = 0x7594974161feb421ULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_face_msgs/RecognizeFaceRequest";
  }

  static const char* value(const  ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
sensor_msgs/Image face\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of camera\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc831a68fd288fbc64ac133eede0b36f";
  }

  static const char* value(const  ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc831a68fd288fbcULL;
  static const uint64_t static_value2 = 0x64ac133eede0b36fULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_face_msgs/RecognizeFaceResponse";
  }

  static const char* value(const  ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
bool recognized\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.face);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RecognizeFaceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.recognized);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RecognizeFaceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<qbo_face_msgs::RecognizeFace> {
  static const char* value() 
  {
    return "133962af4d41ec98941431b15a3d4b9d";
  }

  static const char* value(const qbo_face_msgs::RecognizeFace&) { return value(); } 
};

template<>
struct DataType<qbo_face_msgs::RecognizeFace> {
  static const char* value() 
  {
    return "qbo_face_msgs/RecognizeFace";
  }

  static const char* value(const qbo_face_msgs::RecognizeFace&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "133962af4d41ec98941431b15a3d4b9d";
  }

  static const char* value(const qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_face_msgs/RecognizeFace";
  }

  static const char* value(const qbo_face_msgs::RecognizeFaceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "133962af4d41ec98941431b15a3d4b9d";
  }

  static const char* value(const qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_face_msgs/RecognizeFace";
  }

  static const char* value(const qbo_face_msgs::RecognizeFaceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QBO_FACE_MSGS_SERVICE_RECOGNIZEFACE_H

