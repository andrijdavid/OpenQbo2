/* Auto-generated by genmsg_cpp for file /home/qbo/Desktop/qbo_ws/src/src/qbo_face_vision/qbo_face_msgs/msg/FacePosAndDist.msg */
#ifndef QBO_FACE_MSGS_MESSAGE_FACEPOSANDDIST_H
#define QBO_FACE_MSGS_MESSAGE_FACEPOSANDDIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace qbo_face_msgs
{
template <class ContainerAllocator>
struct FacePosAndDist_ {
  typedef FacePosAndDist_<ContainerAllocator> Type;

  FacePosAndDist_()
  : header()
  , u(0.0)
  , v(0.0)
  , distance_to_head(0.0)
  , image_width(0)
  , image_height(0)
  , face_detected(false)
  , type_of_tracking()
  {
  }

  FacePosAndDist_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , u(0.0)
  , v(0.0)
  , distance_to_head(0.0)
  , image_width(0)
  , image_height(0)
  , face_detected(false)
  , type_of_tracking(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _u_type;
  float u;

  typedef float _v_type;
  float v;

  typedef float _distance_to_head_type;
  float distance_to_head;

  typedef int32_t _image_width_type;
  int32_t image_width;

  typedef int32_t _image_height_type;
  int32_t image_height;

  typedef uint8_t _face_detected_type;
  uint8_t face_detected;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_of_tracking_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type_of_tracking;


  typedef boost::shared_ptr< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator>  const> ConstPtr;
}; // struct FacePosAndDist
typedef  ::qbo_face_msgs::FacePosAndDist_<std::allocator<void> > FacePosAndDist;

typedef boost::shared_ptr< ::qbo_face_msgs::FacePosAndDist> FacePosAndDistPtr;
typedef boost::shared_ptr< ::qbo_face_msgs::FacePosAndDist const> FacePosAndDistConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace qbo_face_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25b96c14697425c4e9c9aa5538bcad7c";
  }

  static const char* value(const  ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x25b96c14697425c4ULL;
  static const uint64_t static_value2 = 0xe9c9aa5538bcad7cULL;
};

template<class ContainerAllocator>
struct DataType< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qbo_face_msgs/FacePosAndDist";
  }

  static const char* value(const  ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Software License Agreement (LGPL v2.1 License)\n\
#\n\
# Copyright (c) 2012 Thecorpora, S.L.\n\
#\n\
# This library is free software; you can redistribute it and/or modify \n\
# it under the terms of the GNU Lesser General Public License as published\n\
# by the Free Software Foundation; either version 2.1 of the License, \n\
# or (at your option) any later version.\n\
#\n\
# This library is distributed in the hope that it will be useful, but \n\
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n\
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \n\
# License for more details.\n\
#  \n\
# You should have received a copy of the GNU General Public License \n\
# along with this program; if not, write to the Free Software \n\
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \n\
# MA 02110-1301, USA.\n\
\n\
Header header\n\
float32 u\n\
float32 v\n\
float32 distance_to_head\n\
int32 image_width\n\
int32 image_height\n\
bool face_detected\n\
string type_of_tracking\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.u);
    stream.next(m.v);
    stream.next(m.distance_to_head);
    stream.next(m.image_width);
    stream.next(m.image_height);
    stream.next(m.face_detected);
    stream.next(m.type_of_tracking);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct FacePosAndDist_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::qbo_face_msgs::FacePosAndDist_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "u: ";
    Printer<float>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<float>::stream(s, indent + "  ", v.v);
    s << indent << "distance_to_head: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_head);
    s << indent << "image_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "face_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.face_detected);
    s << indent << "type_of_tracking: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_of_tracking);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QBO_FACE_MSGS_MESSAGE_FACEPOSANDDIST_H

